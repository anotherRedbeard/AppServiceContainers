trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '*'

parameters:
- name: environmentObjects
  type: object
  default:
    - envName: 'dev'
      region:
        - abrv: 'scus'
          shortName: 'southcentralus'
    - envName: 'test'
      region:
        - abrv: 'scus'
          shortName: 'southcentralus'

variables:
  azureServiceConnection: 'AppServiceDeploymentDemo'
  azureContainerRegistryConnection: 'AppServiceDeploymentDemoACR'
  resourceGroupName: 'red-scus-appservicedemo'
  acrResourceGroupName: 'red-scus-public-acr'
  templateFileName: 'main-deploy-app-service'
  deploymentName: 'App_Service_Deployments'
  containerRegistryName: 'redscuspublicctreg01'
  containerImageName: 'todo-ct-api'
  version: 'v1.0'
  fullImageName: '${{ variables.containerRegistryName }}.azurecr.io/${{ variables.containerImageName }}:${{ variables.version }}.$(Build.BuildNumber)'
  System.Debug: true

resources:
  repositories:
    - repository: templates
      endpoint: AnotherRedbeard
      type: github
      name: AnotherRedbeard/TheOneYamlAzDO


stages:
  - ${{ each envObj in parameters.environmentObjects }}:
    - stage: 'build_infra_stage_${{ envObj.envName }}'
      displayName: 'build infrastructure stage ${{ envObj.envName }}'
      jobs:
        - template: jobs/app-service-bicep-deploy.yaml@templates
          parameters:
            environmentName: '${{ envObj.envName }}'
            templateFileName: '${{ variables.templateFileName }}'
            templateDirectory: 'iac'
            serviceName: 'app_service_container'
            regionAbrv: '${{ envObj.region[0].abrv }}'
            location: '${{ envObj.region[0].shortName }}'
            azureServiceConnection: '${{ variables.azureServiceConnection }}'
            resourceGroupName: '${{ variables.resourceGroupName }}-${{ envObj.envName }}'

  - ${{ each envObj in parameters.environmentObjects }}:
    - stage: 'build_app_container_${{ envObj.envName }}'
      displayName: 'build app service container stage ${{ envObj.envName }}'
      jobs:
      - template: jobs/app-build-push-container.yaml@templates
        parameters:
          environmentName: '${{ envObj.envName }}'
          serviceName: 'app_service_container'
          regionAbrv:  '${{ envObj.region[0].abrv }}'
          azureContainerRegistryName: '${{ variables.azureContainerRegistryConnection }}'
          containerImageName: '${{ variables.containerImageName }}-${{ envObj.envName }}'
          imageTagName: '${{ variables.version }}.$(Build.BuildNumber)'
          dockerFilePath: '$(Build.SourcesDirectory)/src/'

  - ${{ each envObj in parameters.environmentObjects }}:
    - stage: 'deploy_stage_${{ envObj.envName }}'
      displayName: 'Deploy to ${{ envObj.envName }}'
      variables:
        rgName: '${{ variables.resourceGroupName }}-${{ envObj.envName }}'
      jobs:
        - deployment: 'deploy_${{ envObj.envName }}'
          displayName: 'Deploy to ${{ envObj.envName }}'
          pool:
            vmImage: ubuntu-latest
          environment: ${{ envObj.envName }}
          strategy:
            runOnce:
              deploy:
                steps:                      
                  - task: AzureCLI@2
                    displayName: Get Container Registry Credentials
                    inputs:
                      azureSubscription: ${{ variables.azureServiceConnection }}
                      scriptType: bash
                      scriptLocation: inlineScript
                      inlineScript: |
                        echo "##vso[task.setvariable issecret=true;variable=ACR_USERNAME]$(az acr credential show -n ${{ variables.containerRegistryName }} -g ${{ variables.acrResourceGroupName }} --query username --out tsv)"
                        echo "##vso[task.setvariable issecret=true;variable=ACR_PASSWORD]$(az acr credential show -n ${{ variables.containerRegistryName }} -g ${{ variables.acrResourceGroupName }} --query passwords[0].value --out tsv)"
                  
                  - task: AzureCLI@2
                    displayName: Get AppName
                    inputs:
                      azureSubscription: ${{ variables.azureServiceConnection }}
                      scriptType: bash
                      scriptLocation: inlineScript
                      inlineScript: |
                        echo "##vso[task.setvariable variable=APP_NAME]$(az deployment group show -g ${{ variables.rgName }} -n ${{ variables.deploymentName }} --query properties.outputs.appServiceName.value --out tsv)"
                        echo "##vso[task.setvariable variable=APP_PLAN_NAME]$(az deployment group show -g ${{ variables.rgName }} -n ${{ variables.deploymentName }} --query properties.outputs.appServiceName.value --out tsv)"
                  
                  - task: AzureWebAppContainer@1
                    displayName: 'Azure Web App on Container Deploy'
                    inputs:
                      azureSubscription: ${{ variables.azureServiceConnection }}
                      appName: $(APP_NAME)
                      imageName:   ${{ variables.containerRegistryName }}.azurecr.io/${{ variables.containerImageName }}-${{ envObj.envName }}:${{ variables.version }}.$(Build.BuildNumber)
                      #best practice would be to use a Managed Identity instead of setting these ACR credentials here...this is just for an example of how
                      appSettings: "-DOCKER_REGISTRY_SERVER_PASSWORD $(ACR_PASSWORD) -DOCKER_REGISTRY_SERVER_URL ${{ variables.containerRegistryName }}.azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(ACR_USERNAME) -CorsAllowedHosts *"

                  - script: echo 'Hi ${{ envObj.envName }}'!
                  #deploy to dev app service from container image in ACR

