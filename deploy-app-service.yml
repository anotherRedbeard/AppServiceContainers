# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '*'

variables:
  azureServiceConnection: 'AppServiceDeploymentDemo'
  azureContainerRegistryConnection: 'AppServiceDeploymentDemoACR'
  resourceGroupName: 'red-scus-appservicedemo'
  acrResourceGroupName: 'red-scus-public-acr'
  location: 'southcentralus'
  templateFileName: 'main-deploy-app-service'
  environments: ['dev','qa']
  regionAbrv: 'scus'
  deploymentName: 'App_Service_Deployments'
  containerRegistryName: 'redscuspublicctreg01'
  containerImageName: 'todo-ct-api'
  version: 'v1.0'
  fullImageName: '${{ variables.containerRegistryName }}.azurecr.io/${{ variables.containerImageName }}:${{ variables.version }}.$(Build.BuildNumber)'
  System.Debug: true

resources:
  repositories:
    - repository: templates
      endpoint: AnotherRedbeard
      type: github
      name: AnotherRedbeard/TheOneYamlAzDO

#jobs:
#- template: common.yml@templates  # Template reference

stages:
- stage: build_infra_stage
  displayName: 'build infrastructor stage'
  jobs:

  - ${{each envName in parameters.environments}}:
    - template: jobs/app-service-bicep-deploy.yaml@templates
      parameters:
        environmentName: '${{ envName }}'
        templateFileName: '${{ variables.templateFileName }}'
        templateDirectory: 'iac'
        serviceName: 'app_service_container'
        regionAbrv: '${{ variables.regionAbrv }}'
        azureServiceConnection: '${{ variables.azureServiceConnection }}'
        location: '${{ variables.location }}'
        resourceGroupName: '${{ variables.resourceGroupName }}'

- stage: build_app_container
  displayName: 'build app service container stage'
  jobs:
  - template: jobs/app-build-container.yaml@templates
    parameters:
      environmentName: '${{ variables.environmentName }}'
      serviceName: 'app_service_container'
      regionAbrv: '${{ variables.regionAbrv }}'
      azureContainerRegistryName: '${{ variables.azureContainerRegistryConnection }}'
      containerImageName: '${{ variables.containerImageName }}'
      imageTagName: '${{ variables.version }}.$(Build.BuildNumber)'
      dockerFilePath: '$(Build.SourcesDirectory)/src/'

- stage: deploy_stage_dev
  displayName: 'Deploy to dev'
  jobs:
    - deployment: deploy_dev
      displayName: 'Deploy to dev'
      pool:
        vmImage: ubuntu-latest
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:                      
              - task: AzureCLI@2
                displayName: Get Container Registry Credentials
                inputs:
                  azureSubscription: ${{ variables.azureServiceConnection }}
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "##vso[task.setvariable issecret=true;variable=ACR_USERNAME]$(az acr credential show -n ${{ variables.containerRegistryName }} -g ${{ variables.acrResourceGroupName }} --query username --out tsv)"
                    echo "##vso[task.setvariable issecret=true;variable=ACR_PASSWORD]$(az acr credential show -n ${{ variables.containerRegistryName }} -g ${{ variables.acrResourceGroupName }} --query passwords[0].value --out tsv)"
              
              - task: AzureCLI@2
                displayName: Get AppName
                inputs:
                  azureSubscription: ${{ variables.azureServiceConnection }}
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "##vso[task.setvariable variable=APP_NAME]$(az deployment group show -g ${{ variables.resourceGroupName }} -n ${{ variables.deploymentName }} --query properties.outputs.appServiceName.value --out tsv)"
                    echo "##vso[task.setvariable variable=APP_PLAN_NAME]$(az deployment group show -g ${{ variables.resourceGroupName }} -n ${{ variables.deploymentName }} --query properties.outputs.appServiceName.value --out tsv)"
              
              - task: AzureWebAppContainer@1
                displayName: 'Azure Web App on Container Deploy'
                inputs:
                  azureSubscription: ${{ variables.azureServiceConnection }}
                  appName: $(APP_NAME)
                  imageName: ${{ variables.fullImageName }}
                  #best practice would be to use a Managed Identity instead of setting these ACR credentials here...this is just for an example of how
                  appSettings: "-DOCKER_REGISTRY_SERVER_PASSWORD $(ACR_PASSWORD) -DOCKER_REGISTRY_SERVER_URL ${{ variables.containerRegistryName }}.azurecr.io -DOCKER_REGISTRY_SERVER_USERNAME $(ACR_USERNAME) -CorsAllowedHosts *"

              - script: echo Hi dev!
              #deploy to dev app service from container image in ACR

- stage: deploy_stage_test
  displayName: 'Deploy to test'
  jobs:
    - deployment: deploy_test
      displayName: 'Deploy to test'
      pool:
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo Hi test!
              #tag image as test
              #deploy to test app service from container image in ACR
