# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  azureServiceConnection: 'AppServiceDeploymentDemo'
  azureContainerRegistryConnection: 'AppServiceDeploymentDemoACR'
  resourceGroupName: 'red-scus-appservicedemo-dev'
  location: 'southcentralus'
  templateFileName: 'app-service'
  environmentName: 'dev'
  regionAbrv: 'scus'
  deploymentName: 'App Service Container'
  containerRegistryName: 'redscuspublicctreg01'
  containerImageName: 'todo-ct-api'
  version: 'v1.0'
  fullImageName: '${{ variables.containerRegistryName }}.azurecr.io/${{ variables.containerImageName }}'
  System.Debug: true

resources:
  repositories:
    - repository: templates
      endpoint: AnotherRedbeard
      type: github
      name: AnotherRedbeard/TheOneYamlAzDO

#jobs:
#- template: common.yml@templates  # Template reference

stages:
- stage: build_infra_stage
  displayName: 'build infrastructor stage'
  jobs:
  - job: build
    displayName: 'build infrastructor for app service job'
    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: self
    
    - template: tasks/hello-world.yaml@templates
      parameters:
        command: $(Build.BuildNumber)
    
    - template: tasks/azcli-group-task.yaml@templates
      parameters:
        azureSubscriptionName: '${{ variables.azureServiceConnection}}'
        location: '${{ variables.location }}'
        command: 'create'
        resourceGroupName: '${{ variables.resourceGroupName }}'

    - template: tasks/azcli-deployment-group-task.yaml@templates
      parameters:
        azureSubscriptionName: '${{ variables.azureServiceConnection}}'
        location: '${{ variables.location }}'
        templateFileName: '$(Pipeline.Workspace)/${{ variables.templateFileName }}.bicep'
        parametersFileName: '$(Pipeline.Workspace)/parameters/${{ variables.environmentName }}.${{ variables.regionAbrv }}.${{ variables.templateFileName }}.parameters.json'
        command: 'create'
        additionalArguments: '--out yamlc'
        deploymentName: '${{ variables.deploymentName }}'
        resourceGroupName: '${{ variables.resourceGroupName }}'

- stage: build_app_container
  displayName: 'build app service container stage'
  jobs:
  - job: build
    displayName: 'build app service container job'
    variables:
      imageTag: ${{ variables.version }}.$(Build.BuildNumber)
    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: self
    
    - task: Docker@2
      displayName: Build and Push image
      inputs:
        containerRegistry: ${{ variables.azureContainerRegistryConnection }}
        repository: $(containerImageName)
        command: buildAndPush
        Dockerfile: $(Build.SourcesDirectory)/src/Dockerfile
        tags: |
          $(imageTag)
          latest

- stage: deploy_stage_dev
  displayName: 'Deploy to dev'
  jobs:
    - deployment: deploy_dev
      displayName: 'Deploy to dev'
      pool:
        vmImage: ubuntu-latest
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureCLI@2
                displayName: Get Container Registry Credentials
                inputs:
                  azureSubscription: ${{ variables.azureServiceConnection }}
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "##vso[task.setvariable issecret=true;variable=ACR_USERNAME]$(az acr credential show -n ${{ variables.containerRegistryName }} --query username --out tsv)"
                    echo "##vso[task.setvariable issecret=true;variable=ACR_PASSWORD]$(az acr credential show -n ${{ variables.containerRegistryName }} --query passwords[0].value --out tsv)"

              - script: echo Hi dev!

- stage: deploy_stage_test
  displayName: 'Deploy to test'
  jobs:
    - deployment: deploy_test
      displayName: 'Deploy to test'
      pool:
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo Hi test!
